[{"D:\\2.QUT\\IFB398_Capstone_1\\react-template-client-server\\client\\src\\index.js":"1","D:\\2.QUT\\IFB398_Capstone_1\\react-template-client-server\\client\\src\\App.js":"2","D:\\2.QUT\\IFB398_Capstone_1\\react-template-client-server\\client\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1632307240910,"results":"4","hashOfConfig":"5"},{"size":5596,"mtime":1632307240909,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1632307240911,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1b4vpcu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\2.QUT\\IFB398_Capstone_1\\react-template-client-server\\client\\src\\index.js",[],["16","17"],"D:\\2.QUT\\IFB398_Capstone_1\\react-template-client-server\\client\\src\\App.js",["18","19","20"],"import React, {useState} from 'react';\r\nimport 'antd/dist/antd.css';\r\n\r\nimport './App.css';\r\nimport {\r\n  Table,\r\n  Input,\r\n  InputNumber,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Row,\r\n  Col,\r\n  Empty,\r\n} from 'antd';\r\nconst {Search} = Input;\r\n\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n  return (\r\n    <td {...restProps}>\r\n      {editing\r\n        ? <Form.Item\r\n            name={dataIndex}\r\n            style={{\r\n              margin: 0,\r\n            }}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please Input ${title}!`,\r\n              },\r\n            ]}\r\n          >\r\n            {inputNode}\r\n          </Form.Item>\r\n        : children}\r\n    </td>\r\n  );\r\n};\r\n\r\nfunction App () {\r\n  const [isLoading, setIsLoading] = useState (false);\r\n  const [data, setData] = useState (null);\r\n  const [form] = Form.useForm ();\r\n  const [editingKey, setEditingKey] = useState ('');\r\n\r\n  const isEditing = record => record.id === editingKey;\r\n\r\n  const edit = record => {\r\n    form.setFieldsValue ({\r\n      name: '',\r\n      age: '',\r\n      address: '',\r\n      ...record,\r\n    });\r\n    setEditingKey (record.id);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey ('');\r\n  };\r\n\r\n  const save = async id => {\r\n    try {\r\n      const row = await form.validateFields ();\r\n      const newData = [...data];\r\n      const index = newData.findIndex (item => id === item.id);\r\n      console.log (index);\r\n\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice (index, 1, {...item, ...row});\r\n        setData (newData);\r\n\r\n        // POST request using fetch with async/await\r\n        const requestOptions = {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify (newData),\r\n        };\r\n        const response = await fetch (`/api/update`, requestOptions);\r\n        const message = await response.json ();\r\n        alert (message.message);\r\n        setEditingKey ('');\r\n      } else {\r\n        newData.push (row);\r\n        setData (newData);\r\n        setEditingKey ('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log ('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'User ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      editable: false,\r\n    },\r\n    {\r\n      title: 'Username',\r\n      dataIndex: 'username',\r\n      key: 'username',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Date of Birth',\r\n      dataIndex: 'birthdate',\r\n      key: 'birthdate',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (_, record) => {\r\n        const editable = isEditing (record);\r\n        return editable\r\n          ? <span>\r\n              <a\r\n                href=\"javascript:;\"\r\n                onClick={() => save (record.id)}\r\n                style={{\r\n                  marginRight: 8,\r\n                }}\r\n              >\r\n                Save\r\n              </a>\r\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n                <a>Cancel</a>\r\n              </Popconfirm>\r\n            </span>\r\n          : <Typography.Link\r\n              disabled={editingKey !== ''}\r\n              onClick={() => edit (record)}\r\n            >\r\n              Edit\r\n            </Typography.Link>;\r\n      },\r\n    },\r\n  ];\r\n  const mergedColumns = columns.map (col => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: record => ({\r\n        record,\r\n        inputType: col.dataIndex === 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing (record),\r\n      }),\r\n    };\r\n  });\r\n\r\n  // we will use async/await to fetch this data\r\n  async function getData (value) {\r\n    setIsLoading (true);\r\n    const res = await fetch (`/api/users?name=` + value);\r\n    const data = await res.json ();\r\n\r\n    // store the data into our books variable\r\n    setData (data.result);\r\n    setIsLoading (false);\r\n  }\r\n\r\n  const onSearch = value => {\r\n    getData (value);\r\n    console.log (data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Row align=\"center\">\r\n        <Col span={5}>\r\n          <Search\r\n            placeholder=\"input search text\"\r\n            allowClear\r\n            onSearch={onSearch}\r\n            enterButton\r\n            style={{marginBottom: 20}}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row align=\"center\">\r\n        <Col span={15}>\r\n\r\n          {data !== null && data.length > 0 && isLoading === false\r\n            ? <Form form={form} component={false}>\r\n                <Table\r\n                  components={{\r\n                    body: {\r\n                      cell: EditableCell,\r\n                    },\r\n                  }}\r\n                  bordered\r\n                  dataSource={data}\r\n                  columns={mergedColumns}\r\n                  rowClassName=\"editable-row\"\r\n                  pagination={{\r\n                    onChange: cancel,\r\n                  }}\r\n                />\r\n              </Form>\r\n            : <Empty\r\n                image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n                description={<span>No user to display</span>}\r\n              />}\r\n        </Col>\r\n      </Row>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\2.QUT\\IFB398_Capstone_1\\react-template-client-server\\client\\src\\reportWebVitals.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":137,"column":15,"nodeType":"27","endLine":143,"endColumn":16},{"ruleId":"28","severity":1,"message":"29","line":138,"column":22,"nodeType":"30","messageId":"31","endLine":138,"endColumn":36},{"ruleId":"25","severity":1,"message":"32","line":147,"column":17,"nodeType":"27","endLine":147,"endColumn":20},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]